;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*              MODIFICAÇÕES PARA USO COM 12F675                   *
;*                FEITAS PELO PROF. MARDSON                        *
;*                    FEVEREIRO DE 2014                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       NOME DO PROJETO                           *
;*                           CLIENTE                               *
;*         DESENVOLVIDO PELA MOSAICO ENGENHARIA E CONSULTORIA      *
;*   VERSÃO: 1.0                           DATA: 17/06/03          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     DESCRIÇÃO DO ARQUIVO                        *
;*-----------------------------------------------------------------*
;*   MODELO PARA O PIC 12F675                                      *
;*                                                                 *
;*                                                                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ARQUIVOS DE DEFINIÇÕES                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#INCLUDE <p12f675.inc>	;ARQUIVO PADRÃO MICROCHIP PARA 12F675

	__CONFIG _BODEN_OFF & _CP_OFF & _PWRTE_ON & _WDT_OFF & _MCLRE_ON & _INTRC_OSC_NOCLKOUT

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINAÇÃO DE MEMÓRIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;DEFINIÇÃO DE COMANDOS DE USUÁRIO PARA ALTERAÇÃO DA PÁGINA DE MEMÓRIA
#DEFINE	BANK0	BCF STATUS,RP0	;SETA BANK 0 DE MEMÓRIA
#DEFINE	BANK1	BSF STATUS,RP0	;SETA BANK 1 DE MAMÓRIA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARIÁVEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DOS NOMES E ENDEREÇOS DE TODAS AS VARIÁVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	;ENDEREÇO INICIAL DA MEMÓRIA DE
					;USUÁRIO
		W_TEMP		;REGISTRADORES TEMPORÁRIOS PARA USO
		STATUS_TEMP	;JUNTO ÀS INTERRUPÇÕES
		DADO		;ARMAZENA O DADO PARA A EEPROM
		EMPTY		;AUX
		VALOR_EEFROM	;AUX2
		VETOR		;AUX3
		FLAG_PARAR
		CONT		;CONTADOR DA ORDENAÇÃO
		NUM_ATRAS
		NUM_FRENTE
		AUX
		POINT_ATRAS
		POINT_FRENTE
		
		

	ENDC			;FIM DO BLOCO DE MEMÓRIA
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS FLAGS UTILIZADOS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODAS AS CONSTANTES UTILIZADAS PELO SISTEMA
; INICIALIZAÇÃO DA EEPROM, DE ACORDO COM A DESCRIÇÃO NO ARQUIVO "Def_Rega_Formigas.inc"

;A PARTIR DO ENDEREÇO ZERO DA EEPROM, DADOS EM ORDEM ALEATÓRIA
	ORG 0x2100
	DE	0X89,0X1E,0X39,0X9F,0XC2,0X0C,0XAB,0X33,0X63,0XD3,0X95,0X7B,0X38,0XD6,0X1E,0X48
	DE	0XDB,0XD8,0X86,0XFD,0XA5,0XFC,0X0C,0XBE,0X68,0X9B,0XD9,0X10,0XD8,0XEC,0X90,0X91
	DE	0XAA,0XBB,0XCC,0XDD,0XEE,0XF1,0XC9,0X77

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO ENTRADA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           SAÍDAS                                *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO SAÍDA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x00			;ENDEREÇO INICIAL DE PROCESSAMENTO
	GOTO	INICIO
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    INÍCIO DA INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; ENDEREÇO DE DESVIO DAS INTERRUPÇÕES. A PRIMEIRA TAREFA É SALVAR OS
; VALORES DE "W" E "STATUS" PARA RECUPERAÇÃO FUTURA

	ORG	0x04			;ENDEREÇO INICIAL DA INTERRUPÇÃO
	MOVWF	W_TEMP		;COPIA W PARA W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP	;COPIA STATUS PARA STATUS_TEMP

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    ROTINA DE INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; AQUI SERÁ ESCRITA AS ROTINAS DE RECONHECIMENTO E TRATAMENTO DAS
; INTERRUPÇÕES

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                 ROTINA DE SAÍDA DA INTERRUPÇÃO                  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; OS VALORES DE "W" E "STATUS" DEVEM SER RECUPERADOS ANTES DE 
; RETORNAR DA INTERRUPÇÃO

SAI_INT
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS		;MOVE STATUS_TEMP PARA STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W	;MOVE W_TEMP PARA W
	RETFIE

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*	            	 ROTINAS E SUBROTINAS                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; CADA ROTINA OU SUBROTINA DEVE POSSUIR A DESCRIÇÃO DE FUNCIONAMENTO
; E UM NOME COERENTE ÀS SUAS FUNÇÕES.
LE_EEPROM
;LER DADO DA EEPROM, CUJO ENDEREÇO É INDICADO EM W
;DADO LIDO RETORNA EM W
	ANDLW	.127		;LIMITA ENDEREÇO MAX. 127
	BANK1				;ACESSO VIA BANK 1
	MOVWF	EEADR		;INDICA O END. DE LEITURA
	BSF		EECON1,RD	;INICIA O PROCESSO DE LEITURA
	MOVF	EEDATA,W	;COLOCA DADO LIDO EM W
	BANK0				;POSICIONA PARA BANK 0
	RETURN

GRAVA_EEPROM
;ESCREVE DADO (DADO) NA EEPROM, CUJO ENDEREÇO É INDICADO EM W
	ANDLW	.127		;LIMITA ENDEREÇO MAX. 127
	BANK1				;ACESSO VIA BANK 1
	MOVWF	EEADR
	MOVF	DADO,W
	MOVWF	EEDATA
	BSF		EECON1,WREN ;HABILITA ESCRITA
	BCF		INTCON,GIE	;DESLIGA INTERRUPÇÕES
	MOVLW	B'01010101'	;DESBLOQUEIA ESCRITA
	MOVWF	EECON2		;
	MOVLW	B'10101010'	;DESBLOQUEIA ESCRITA
	MOVWF	EECON2		;
	BSF		EECON1,WR ;INICIA A ESCRITA
AGUARDA
	BTFSC	EECON1,WR ;TERMINOU?
	GOTO	AGUARDA
	BSF		INTCON,GIE ;HABILITA INTERRUPÇÕES
	BANK0				;POSICIONA PARA BANK 0
	RETURN
	
ORDENACAO
	
	MOVLW	0X30	        ;PASSA O END. DA 1º POSIÇÃO
	MOVWF	FSR		;APONTA PARA A PRIMEIRA POSIÇÃO
	
PROX_NUM_ATRAS	
	MOVWF	NUM_ATRAS	;SALVA O VALOR DA 1º POSIÇÃO EM NUM_ATRAS
	
	;DECFSZ	CONT, 1		;DECREMENTA CONT ATE Q SEJA ZERO
	;GOTO	$+2
	;GOTO	SAIDA
	
PROXIMO_NUM
	INCF	FSR	
	MOVWF	NUM_FRENTE	; SALVA O VALOR DA PROXIMA POSSIÇÃO
	
	
	MOVFW	NUM_ATRAS	;COLOCA NUM_ATRAS EM W
	SUBWF	NUM_FRENTE, 0	;NUM_FRENTE - NUM_ATRAS	    F-W < 0  CARRY 0 W>F
	BTFSS	STATUS, 0	;			    F-W >= 0 CARRY 1 F>W
	GOTO	NUM_MAIOR	;NUM_ATRAS É MAIOR
	GOTO	NUM_MENOR	;NUM_ATRAS É MENOR
	
NUM_MAIOR			;TROCA DE POSIÇÃO 
	MOVFW	NUM_ATRAS	;COLOCA NUM_ATRAS EM W
	MOVWF	AUX		;SALVA O VALOR DE NUM_ATRAS EM AUX
	MOVFW	NUM_FRENTE	;COLOCA NUM_FRENTE EM W
	MOVWF	NUM_ATRAS	;COLOCA O NUM_FRENTE E NUM_ATRAS
	MOVFW	AUX		;COLOCA NUM_ATRAS EM W
	MOVWF	NUM_FRENTE	;COLOCA NUM_ATRAS EM NUM_FRENTE
	DECF	FSR		;APONTO PARA POSIÇÃO ATRAS P/ GRAVAR NA MEMORIA
	MOVFW	NUM_ATRAS	;COLOCO NO W NUM_ATRAS
	MOVWF	INDF		;E INSIRO NA MEMORIA
	INCF	FSR		;ANALOGO
	MOVFW	NUM_FRENTE
	MOVWF	INDF
	
	GOTO	PROXIMO_NUM
	
	
NUM_MENOR			;ANALISA O PROXIMO
	
	BTFSS	FSR, 6		;TESTE PARA SABER SE JA PASSOU TODOS OS NUMEROS 01011000=88DECIMAL
	GOTO	PROXIMO_NUM		 
	BTFSS	FSR, 4
	GOTO	PROXIMO_NUM
	BTFSS	FSR,3
	GOTO	PROXIMO_NUM
	INCF	FSR		;VALOR PERDIDO ARRUMAR, APONTA FSR PARA PROXIMO NUMERO PARA ANALISAR COM TODOS
	GOTO	PROX_NUM_ATRAS	
	
SAIDA	

	RETURN



;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIO DO PROGRAMA                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
INICIO
	BANK1			;ALTERA PARA O BANCO 1
	MOVLW	B'00000000'	;CONFIGURA TODAS AS PORTAS DO GPIO (PINOS)
	MOVWF	TRISIO		;COMO SAÍDAS
	CLRF	ANSEL 		;DEFINE PORTAS COMO Digital I/O
	MOVLW	B'00000100'
	MOVWF	OPTION_REG	;DEFINE OPÇÕES DE OPERAÇÃO
	MOVLW	B'00000000'
	MOVWF	INTCON		;DEFINE OPÇÕES DE INTERRUPÇÕES
	BANK0				;RETORNA PARA O BANCO
	MOVLW	B'00000111'
	MOVWF	CMCON		;DEFINE O MODO DE OPERAÇÃO DO COMPARADOR ANALÓGICO

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZAÇÃO DAS VARIÁVEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	MOVLW	.0
	MOVWF	VETOR
	MOVLW	.0
	MOVWF	FLAG_PARAR
	MOVLW	0X30		 ;APONTO PARA O INICIO DO BLOCO NA RAM, 48DEC ate 88DEC
	MOVWF	FSR		 ;QUE VAI RECEBER OS VALORES DA EEFROM,0x30 -> 0x58
	MOVLW	.40
	MOVWF	CONT
	CLRF	NUM_ATRAS
	CLRF	NUM_FRENTE
	
	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ROTINA PRINCIPAL                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
MAIN
	BTFSC	FLAG_PARAR,0		 
	GOTO	FIM
NEXT	
	MOVLW	.0		 ;USO EMPTY SÓ PARA PODE SOMAR VETOR + 0 E SALVAR
	MOVWF	EMPTY		 ;EM W, E ASSIM PEGAR CADA VALOR NA EEPROM
	ADDWF	VETOR, W	 ;PORQUE A CADA PASSAGEM SERA INCREMENTADO O VETOR
	CALL	LE_EEPROM	 ;RETORNA NO W
	MOVWF	VALOR_EEFROM	 ;PEGO O VALOR DO EEPROM E SALVO EM "VALOR_EEFROM"
			
	MOVLW	.0		 ;USO O EMPTY NOVAMENTE PARA SOMAR "VALOR_EEFROM" + 0 E SALVAR
	MOVWF	EMPTY		 ;EM W, "VALOR_EEFROM" VAI TER O VALOR DA EEFROM E VAI SALVAR
	ADDWF	VALOR_EEFROM, W	 ;NO ENDEREÇO APONTADO PELO FSR
	MOVWF	INDF		 ;
	INCF	FSR 
	INCF	VETOR
	
	BTFSS	FSR, 6		 ;TESTE PARA SABER SE JA PASSOU TODOS OS NUMEROS 01011000=88DECIMAL
	GOTO	NEXT		 
	BTFSS	FSR, 4
	GOTO	NEXT
	BTFSS	FSR,3
	GOTO	NEXT

	CALL	ORDENACAO	 ;ORDENA OS VALORES NA RAM
FIM
	CLRF	FLAG_PARAR	
	BSF	FLAG_PARAR, 0
	GOTO	MAIN

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       FIM DO PROGRAMA                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	END
